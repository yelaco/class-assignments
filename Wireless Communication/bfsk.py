def bfsk_mod(a,fc,fd,L,fs,fsk_type='coherent',enable_plot = False):
    """
    Function to modulate an incoming binary stream using BFSK
    Parameters:
    a : input binary data stream (0's and 1's) to modulate
    fc : center frequency of the carrier in Hertz
    fd : frequency separation measured from Fc
    L : number of samples in 1-bit period
    fs : Sampling frequency for discrete-time simulation
    fsk_type : 'coherent' (default) or 'noncoherent' FSK generation
    enable_plot: True = plot transmitter waveforms (default False)
    Returns:
    (s_t,phase) : tuple containing following parameters
    s_t : BFSK modulated signal
    phase : initial phase generated by modulator, applicable only for
    coherent FSK. It can be used when using coherent detection at Rx
    """
    from scipy.signal import upfirdn
    a_t = upfirdn(h=[1]*L, x=a, up = L) #data to waveform
    t = np.arange(start=0,stop=len(a_t))/fs #time base
    if fsk_type.lower() == 'noncoherent':
        # carrier 1 with random phase
        c1 = np.cos(2*np.pi*(fc+fd/2)*t+2*np.pi*np.random.random_sample())
        # carrier 2 with random phase
        c2 = np.cos(2*np.pi*(fc-fd/2)*t+2*np.pi*np.random.random_sample())
    else: #coherent is default
    # random phase from uniform distribution [0,2pi)
        phase=2*np.pi*np.random.random_sample()
        c1 = np.cos(2*np.pi*(fc+fd/2)*t+phase) # carrier 1 with random phase
        c2 = np.cos(2*np.pi*(fc-fd/2)*t+phase) # carrier 2 with the same random phase
        s_t = a_t*c1 +(-a_t+1)*c2 # BFSK signal (MUX selection)

    if enable_plot:
        fig, (ax1,ax2)=plt.subplots(2, 1);ax1.plot(t,a_t);ax2.plot(t,s_t);fig.show()
    return (s_t,phase)